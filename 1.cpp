#include <iostream>
#include <string>
using namespace std;
 
// Функция для нахождения длины самой длинной общей подпоследовательности
// последовательности `X[0…m-1]` и `Y[0…n-1]`
int LCSLength(string X, string Y, int m, int n)
{
    // возврат, если достигнут конец любой последовательности
    if (m == 0 || n == 0) {
        return 0;
    }
 
    // если последний символ `X` и `Y` совпадают
    if (X[m - 1] == Y[n - 1]) {
        return LCSLength(X, Y, m - 1, n - 1) + 1;
    }
 
    // иначе, если последний символ `X` и `Y` не совпадают
    return max(LCSLength(X, Y, m, n - 1), LCSLength(X, Y, m - 1, n));
}
//atomic_commit
 
int main()
{
    string X = "9561351746328158663654010357389389063945320236673055567757166305291000173741174276651724763291663401334250511710373696467449265317432929557071486041160364325187470519031095392854086158619514133193687142646886702713174363935379287224077034826873252537504645095437049639894998148198698899929532501491684180225524676825265626536323714615170119477364578936809320771952551903434535609607948828253446313311174937758264122621161490994791889831795686220142117817626914670384205137546717525436091274013422592214187111553751234331331452696329783810162554332213676275197738785681531429356534428172123636294963730737434832999783539771595313148097964312153857186364739529853289545488743887659678362463408611628138569961278286132533672201962564514877224691432332853798446550144567219709958195363764755022512632688754151969353322994438245184667247245346540660284305339407584264338599703224199974959751287436590982649651912631198023473835989712624209171286466419709514062934134809254189476198313559646804577434816989821387435264376392572852793495306593457206340127512161593260273785557889786166995892849824524723927708648585862576314927548756181967686153243210711973478122414394895167464212928695514253137775294978581949573901472616875326524821240357151178941407399339961789670741681835565131817342985012308536605785647647325424653946544358272831066790486245993725648010593199148765691010003798534698987934796286897054141046128008507987996929338785337734185155769738077917937286101749233962778278844217936269148181899380172311120121372208891611445450367521342355144958573047859174967844469227569197585743012287219338112999546481166048492835057391731023641343113539546151783818682144092351389411093159570187345283697835882633993031989921333451465976251103212433168925597992755318244926836143179421536617184760568347159951567189549949983318567585693247601726332463199063596052163126324090993289033022538619416350911743883783853274118146393494440681205678356568922744563146762515492872226612715140614155988396435105489197385246807095057061871973298925027436225326551666648986321661955360895848350548915618410526881830884625865864530364514562705849865840768603108354899868821878486413896872129978018382799717562502424588373188710620438120467833340987806628459553965498924105822704690573800243372939338986246983445196931290150610635809496779722596920671639172857597546941382768680432403358610584421360543711867327137373778474022484462945397542969432906265219505871347298731526387872714958265561697171872453931802156184482719428068054766613563082648518184533438471857945739307897788422519624096084221348031525053093626769688657429365669441957962171663374691694815636432772992251973886780637735390810787757731781035320376751465193371491406883457243233049037459388375669614601638886806456054632957419913441927935221343386041578287434492778610715429260769892925796989492532294774976111768576563155"; 
    string Y = "59944998835074968791417485968746285749054837814394149193388027461538849652192556931194597010880498245729908387983610898695888940560878665106489004233841424513354864113125997484467896392658537935217991987031590732751939662826869593215456772916397712614771968540205692900920688278843293751538638424234768239226192995175535105992689991692563614536538754632345695204068021116323775128471069220879156816748985219823232508918965925669445388079993311705759025493322986854744351365051396098949965876515675431011540736638377439223822457230854773440910595966982688416526855028305491354252002395089046799124628433578906970872373457158320132661358017203646687144489085636836488253921394992433452243680472228767211202337589827856101691564275787006716872228075991985291091898866672632616171016473751432762348037664331977741520334910006325242113187926332637087943914886231428752944706832512145621916032972490925258749356218553380226604857736536661211353575667194231579919502253301824647214634041490325567353873742872693191985311705909177919656853691226507858819518453982653823917269373097672857062876415574096147051147939770189741339894072933869698050829728090489830462621595298381189431997384721918043453229924657491743773950542452674737124093398406286557008388613312150778272821335294810231495345741219293792917979883684810040379834889590371402716958869128095128379857694778858299137691350694909851721985136235359534484083258979756334858145175806358157554171223519346893394877707559765169224705918407381188406157913148649494946543938199233346554219880971154362889900598438633744908170183114797157759723511504402448480394346409225912813632455707761718641269396910211178124212841233558630869679476634439764659502196131373884535585364250274716140643437492525095478141930546833753786449528741939409324681078102029717513261267712630577548498743895856086134055774420904479266979914977824681437728084967921517926396018429354147621641866446006149739086211426011876442985369364781819655575335685468937278825550361224115689069756159358593731122068717244726442823143648394060912384161480188577987028576569729178555236994073262111546961000294830329680463028799071713981544921753332954948499363348549551084373268926231232843119613649713226933290239933166770774213217574881697835495606157365820913289438709361124934424692741379784719867276602023287233053621000455720404977502253977606982506654021351332130193497630160827596800574567238591967950801258951542906737507193382632067777661992810579746992750089437649898763733875954087105157127139549312817283328638280497081406719318817146293596608413732968950571195946784144385550723215394154736495921997986750332879137429331079976129244470836835116446617414884396670803431318401678796427706961087673371048667644125914014145662728438866502427482825559446988156199930638617949538373347083380979645913031298881823229799820324716647445729568978338717184434843333966169141311610665407483945303398054101795831229393206796778441713556653658698438568240018829294968737420155527480972759466913954778332131563335687253632187210625480680846771013248163333239028866536288815261910893951414741236018925293386126322422098746034417619154737842806161954275985647539268799417687465627242316439819280676470155307457127511475821935867112996305752757493481604945929372600859045508432686443911921267145233942429585203649457505866313729322703315425218382701525747215793256791756209489912560016637273958151339466852952858757349055222347835232110690979950253550378956748181719955224891929911250362102224152347383643741791876211759256274637344891618967361096787025878528206062949409792047499443786135368640480912477601850995782969161917839977191113094673196566524882735537857648766717604519535694323222338240983525949812045404033164169473655189818978667093774516606652335624417461551796172736681019168322183585052547598290538725271427423399590649233206172199706215165971984540829518294079374153142629501384510421367853536877923352778497504769696291182271457445998388420989716696331952444685507377109286979269985414661829822288157852248556774322053778615121588629575109169212695306737303177676183966835130618728423290382681163486385850020547925084287478910380917687858406562785480370422497994451223431339170841904529748714455235769657671589711443832437943247757460309665518938926858978762393400809170137364258638849085374035934750584710417187959753333919671286215403584726433137343526269323079717998133685456826516298453124529123990902406358252700307707164883283316628096065764954553745331032415165852203117336528568827741921564545076418870871944367128653947691879230856215835333938694971128303575372841973268152335541193511530843784014808371924965972160364662206858601707737505648066103591007769047565926976681125703326568341361056278754755412075946057466845849933312448383730434341513997385573360168491696081421383520790928100012150580252189095979979231158418684955618607393199996770932366668621121303466270633586743669712755255878431459522363851257239992823421853470891812239732757413174083864413833499282367575756984832463268403201493350245268191676721242151636128166420726713321142320603259349331513851945670465961748331535198716909249324623236228645177308664424572237899971735474812134719127465208776746396381051885311720855494528642922729936351489563648891639892755808541809848668087977495939196830185998951945091069018560810103606246059201708703861794731157903472043646269834454014768164523828214945732536607566409318661914879196227661174796698633312516792371143847207065662166092578332289623850760529827810617853332834592347108366467679446187564263349262675282028739049794710599236714289415103122450582919199585119454689944741523454387296343410897484297924655498342516448210356729044978633062849905602164255978751958276932421054656354375345140869487357481283814681744287299480795723573";
 
    cout << "The length of the LCS is " <<
            LCSLength(X, Y, X.length(), Y.length());
 
    return 0;
}